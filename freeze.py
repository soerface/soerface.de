#!/bin/env python3

import os
import shutil
from pathlib import Path

from flask_frozen import Freezer
from app import app


def main():
    app.config["FREEZER_DESTINATION"] = "build"
    app.config["FROZEN"] = True
    cname = os.getenv("CNAME")
    if cname:
        app.config["SERVER_NAME"] = cname
        app.config["PREFERRED_URL_SCHEME"] = "https"
    elif github_repository := os.getenv("GITHUB_REPOSITORY"):
        owner, sep, repo = github_repository.partition("/")
        app.config["SERVER_NAME"] = repo
        app.config["PREFERRED_URL_SCHEME"] = "https"

    freezer = Freezer(app)

    # This allows explicit adding of routes that are not linked anywhere.
    # Currently, we add a link in blog.load_article() function, so we don't need this.
    # Maybe it will be useful sometime
    #
    # @freezer.register_generator
    # def article_media():
    #     yield {
    #         'year': '2020',
    #         'month': '02',
    #         'day': '11',
    #         'slug': 'post-production-with-ffmpeg',
    #         'filename': 'audacity_opened.png',
    #     }
    #     articles = ARTICLE_BASE_PATH.glob('*')
    # article_media.__name__ = 'blog.article_media'

    freezer.freeze()
    with open(Path(freezer.root) / ".nojekyll", "w") as f:
        f.write("")
    cname = os.getenv("CNAME")
    if cname:
        with open(Path(freezer.root) / "CNAME", "w") as f:
            f.write(cname)
    elif github_repository := os.getenv("GITHUB_REPOSITORY"):
        # A prefix will be generated by the flask app, but we don"t want to have that path as a directory,
        # since github will prefix username.github.io/repositoryname automatically.
        # Therefore, move the stuff out of the inner directory
        owner, sep, repo = github_repository.partition("/")
        directory = Path(freezer.root) / repo
        tmp_path = Path("/tmp/tmp_build_dir")
        directory.rename(tmp_path)
        shutil.rmtree(freezer.root)
        tmp_path.rename(freezer.root)


if __name__ == "__main__":
    main()
